// Copyright 2016 Amazon.com, Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Automatically generated by MockGen. DO NOT EDIT!
// Source: pkg/deployment/environment.go

package mocks

import (
	context "context"
	types "github.com/blox/blox/daemon-scheduler/pkg/types"
	gomock "github.com/golang/mock/gomock"
)

// Mock of Environment interface
type MockEnvironment struct {
	ctrl     *gomock.Controller
	recorder *_MockEnvironmentRecorder
}

// Recorder for MockEnvironment (not exported)
type _MockEnvironmentRecorder struct {
	mock *MockEnvironment
}

func NewMockEnvironment(ctrl *gomock.Controller) *MockEnvironment {
	mock := &MockEnvironment{ctrl: ctrl}
	mock.recorder = &_MockEnvironmentRecorder{mock}
	return mock
}

func (_m *MockEnvironment) EXPECT() *_MockEnvironmentRecorder {
	return _m.recorder
}

func (_m *MockEnvironment) CreateEnvironment(ctx context.Context, name string, taskDefinition string, cluster string) (*types.Environment, error) {
	ret := _m.ctrl.Call(_m, "CreateEnvironment", ctx, name, taskDefinition, cluster)
	ret0, _ := ret[0].(*types.Environment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEnvironmentRecorder) CreateEnvironment(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateEnvironment", arg0, arg1, arg2, arg3)
}

func (_m *MockEnvironment) GetEnvironment(ctx context.Context, name string) (*types.Environment, error) {
	ret := _m.ctrl.Call(_m, "GetEnvironment", ctx, name)
	ret0, _ := ret[0].(*types.Environment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEnvironmentRecorder) GetEnvironment(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetEnvironment", arg0, arg1)
}

func (_m *MockEnvironment) DeleteEnvironment(ctx context.Context, name string) error {
	ret := _m.ctrl.Call(_m, "DeleteEnvironment", ctx, name)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockEnvironmentRecorder) DeleteEnvironment(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteEnvironment", arg0, arg1)
}

func (_m *MockEnvironment) ListEnvironments(ctx context.Context) ([]types.Environment, error) {
	ret := _m.ctrl.Call(_m, "ListEnvironments", ctx)
	ret0, _ := ret[0].([]types.Environment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEnvironmentRecorder) ListEnvironments(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListEnvironments", arg0)
}

func (_m *MockEnvironment) FilterEnvironments(ctx context.Context, filterKey string, filterVal string) ([]types.Environment, error) {
	ret := _m.ctrl.Call(_m, "FilterEnvironments", ctx, filterKey, filterVal)
	ret0, _ := ret[0].([]types.Environment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEnvironmentRecorder) FilterEnvironments(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "FilterEnvironments", arg0, arg1, arg2)
}

func (_m *MockEnvironment) AddDeployment(ctx context.Context, environment types.Environment, deployment types.Deployment) (*types.Environment, error) {
	ret := _m.ctrl.Call(_m, "AddDeployment", ctx, environment, deployment)
	ret0, _ := ret[0].(*types.Environment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEnvironmentRecorder) AddDeployment(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AddDeployment", arg0, arg1, arg2)
}

func (_m *MockEnvironment) UpdateDeployment(ctx context.Context, environment types.Environment, deployment types.Deployment) (*types.Environment, error) {
	ret := _m.ctrl.Call(_m, "UpdateDeployment", ctx, environment, deployment)
	ret0, _ := ret[0].(*types.Environment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEnvironmentRecorder) UpdateDeployment(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateDeployment", arg0, arg1, arg2)
}

func (_m *MockEnvironment) GetCurrentDeployment(ctx context.Context, name string) (*types.Deployment, error) {
	ret := _m.ctrl.Call(_m, "GetCurrentDeployment", ctx, name)
	ret0, _ := ret[0].(*types.Deployment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEnvironmentRecorder) GetCurrentDeployment(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetCurrentDeployment", arg0, arg1)
}
